= Prigner Templates

Prigner defines a template as a set of files that contains all source needed to
build a project. All models are parsed using ERB as engine.

A example of template:

  bash/
  `-- default/
      |-- models/
      |   `-- script.sh
      `-- specfile

  # bash/default/models/script.sh
  #!/bin/bash
  #$ <%=project.name%> v0.1.0
  #$
  #$ Usage:
  #$   <%=project.name%> [options] [args]
  #$
  #$ Options:
  #$   -e     Enable anything.
  #$   -s     Set value to anything.
  #$   -h     Show this message.
  #$
  
  path="${BASH_SOURCE%/*}/"
  
  # This function show the message written in the header.
  function help {
    local   origin="$(1<${0})"
    local comments="${origin}"
  
    comments="${comments#\#!*\#\$}"
    comments="${comments%\#\$*}"
    comments="${comments//\#\$ }"
    comments="${comments:1:${#comments}}"
  
    test "${comments//\$}" != "${origin}" && echo "${comments//\#\$}"
  }
  
  [[ $# -eq 0 ]] && help && exit 0
  
  declare enabled
  declare setted
  
  while getopts "es:h" opt; do
    case $opt in
      e) enabled=1 ;;
      s) setted=$OPTARG ;;
      h) help && exit 0 ;;
      *) help && exit 0 ;;
    esac
    shift $(($OPTIND - 1))
  done
  
  [[ $enabled ]] && echo "<%=project.name%> enabled anything."
  [[ $setted  ]] && echo "<%=project.name%> set anything to $setted."

The +bash+ is the template *namespace*. When you use the following command:

  prign new bash myscript

Prigner find the default template for the +bash+ namespace. That is, is equal
to use the command:

  prign new bash:default myscript

This is useful for create template scopes and you can able create most
templates scoped by namespace. Example:

  ruby/
  |-- default/
  |   |-- models/
  |   |   |-- CHANGELOG
  |   |   |-- COPYING
  |   |   |-- executable
  |   |   |-- module.rb
  |   |   |-- README.rdoc
  |   |   |-- testhelper.rb
  |   |   `-- test.rb
  |   `-- specfile
  |-- gem/
  |   |-- models/
  |   |   |-- CHANGELOG
  |   |   |-- cli.rb
  |   |   |-- COPYING
  |   |   |-- executable
  |   |   |-- gemspec
  |   |   |-- module.rb
  |   |   |-- Rakefile
  |   |   |-- README.rdoc
  |   |   |-- testhelper.rb
  |   |   `-- test.rb
  |   `-- specfile
  `-- sinatra/
      |-- models/
      |   |-- mvc/
      |   |   |-- config.rb
      |   |   |-- controller.rb
      |   |   |-- database.yml
      |   |   |-- model.rb
      |   |   `-- view.erb
      |   |-- application.rb
      |   |-- CHANGELOG
      |   |-- cli.rb
      |   |-- config.ru
      |   |-- executable
      |   |-- gemspec
      |   |-- LICENSE
      |   |-- module.rb
      |   |-- Rakefile
      |   |-- README.rdoc
      |   |-- testhelper.rb
      |   `-- test.rb
      `-- specfile

In this example the +ruby+ namespace contains tree templates: +default+, +gem+
and +sinatra+.

== Template specification

The template has a specification file that defines the necessary information
about template.

=== Specfile

The +specfile+ contains all needed information about template and parses
several filters as the keyword "project". This file must contain the following
keys:

[*author*]
  The template author name.

[*email*]
  Email for feedback.

[*version*]
  Template version.

[*description*]
  Template description.

[*directories*]
  List of directories. This directories are created inside of the project
  directory.

[*files*]
  Template files. Use this keyword to map a pair of model and the result file.
  Example:

    files:
      script.sh: (project).sh

[*options*]
  The template options. Each option most be defined by a key that contained only
  letters. Example:

    options:
      svn: Enable Subversion keys in source code.

  Each option can includes files. For this, use the following syntax:

    options:                              # Group of options
      bin:                                # - keyword
        description:                      # - description
          Includes the executable file.   #
        files:                            # - files
          executable: bin/(project)

In the +bash+ default template example, the specfile contains the following
information:

  # bash/default/specfile
  author:
    Hallison Batista
  email:
    hallison@codigorama.com
  version:
    0.1.0
  description:
    A simple Bash script

  options:

  directories:

  files:
    script.sh: (project).sh

  # vim: filetype=yaml

